"""
This file is autogenerated from an ImageJ plugin generation pipeline.
"""

from bfio.bfio import BioReader, BioWriter
import argparse
import logging
import os
import numpy as np
from pathlib import Path
import ij_converter
import jpype, imagej, scyjava
import typing, os

# Import environment variables
POLUS_LOG = getattr(logging, os.environ.get("POLUS_LOG", "INFO"))
POLUS_EXT = os.environ.get("POLUS_EXT", ".ome.tif")

# Initialize the logger
logging.basicConfig(
    format="%(asctime)s - %(name)-8s - %(levelname)-8s - %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)
logger = logging.getLogger("main")
logger.setLevel(POLUS_LOG)


def main(
    _opName: str,
    _in1: Path,
    _threshold: str,
    _out: Path,
) -> None:

    """Initialize ImageJ"""
    # Bioformats throws a debug message, disable the loci debugger to mute it
    def disable_loci_logs():
        DebugTools = scyjava.jimport("loci.common.DebugTools")
        DebugTools.setRootLevel("WARN")

    scyjava.when_jvm_starts(disable_loci_logs)

    # This is the version of ImageJ pre-downloaded into the docker container
    logger.info("Starting ImageJ...")
    ij = imagej.init(
        "sc.fiji:fiji:2.1.1+net.imagej:imagej-legacy:0.37.4", mode='headless'
    )
    # ij_converter.ij = ij
    logger.info("Loaded ImageJ version: {}".format(ij.getVersion()))

    """ Validate and organize the inputs """
    args = []
    argument_types = []
    arg_len = 0

    # Validate opName
    opName_values = [
        "ApplyManualThreshold"
    ]
    assert _opName in opName_values, "opName must be one of {}".format(opName_values)

    # Validate in1
    in1_types = {
        "ApplyManualThreshold": "IterableInterval",
    }

    # Check that all inputs are specified
    if _in1 is None and _opName in list(in1_types.keys()):
        raise ValueError("{} must be defined to run {}.".format("in1", _opName))
    elif _in1 != None:
        in1_type = in1_types[_opName]

        # switch to images folder if present
        if _in1.joinpath("images").is_dir():
            _in1 = _in1.joinpath("images").absolute()

        args.append([f for f in _in1.iterdir() if f.is_file()])
        arg_len = len(args[-1])
    else:
        argument_types.append(None)
        args.append([None])


    # Validate threshold
    threshold_types = {
        "ApplyManualThreshold": "RealType",
    }

    # Check that all inputs are specified
    if _threshold is None and _opName in list(threshold_types.keys()):
        raise ValueError("{} must be defined to run {}.".format("threshold", _opName))
    else:
        threshold = None

    for i in range(len(args)):
        if len(args[i]) == 1:
            args[i] = args[i] * arg_len

    """ Set up the output """
    out_types = {
        "ApplyManualThreshold": "IterableInterval",
    }

    """ Run the plugin """
    try:
        for ind, (in1_path,) in enumerate(zip(*args)):
            if in1_path != None:

                # Load the first plane of image in in1 collection
                logger.info("Processing image: {}".format(in1_path))
                in1_br = BioReader(in1_path)
                
                # Convert to appropriate numpy array
                in1 = ij_converter.to_java(
                    ij, np.squeeze(in1_br[:, :, 0:1, 0, 0]), in1_type
                )
                
                metadata = in1_br.metadata
                fname = in1_path.name
                dtype = ij.py.dtype(in1)
                
                # Save the shape for out input
                shape = ij.py.dims(in1)

            if _threshold is not None:
                threshold = ij_converter.to_java(
                    ij, _threshold, threshold_types[_opName], dtype
                )

            # Generate the out input variable if required
            out_input = ij_converter.to_java(
                ij, np.zeros(shape=shape, dtype=dtype), "IterableInterval"
            )

            logger.info("Running op...")      
                
            if _opName == "ApplyManualThreshold":
                out = ij.op().threshold().apply(in1, threshold)

            logger.info("Completed op!")
            if in1_path != None:
                in1_br.close()

            logger.info(f"output {out}")

            # Saving output file to out
            logger.info("Saving...")
            # out_array = ij_converter.from_java(ij, out, out_types[_opName])
            ut_array = ij_converter.from_java(ij, out)

            logger.info("Writing to disk...")       
            bw = BioWriter(_out.joinpath(fname), metadata=metadata)
            bw.Z = 1
            bw.dtype = out_array.dtype
            bw[:] = out_array.astype(bw.dtype)
            bw.close()

    except Exception as e:
        logger.error("There was an error, shutting down jvm before raising...")
        raise e

    # finally:
    #     # Exit the program
    #     logger.info("Shutting down jvm...")
    #     del ij
    #     jpype.shutdownJVM()
    #     logger.info("Complete!")


if __name__ == "__main__":

    """Setup Command Line Arguments"""
    logger.info("Parsing arguments...")
    parser = argparse.ArgumentParser(
        prog="main",
        description="This plugin applies a constant or manual threshold to an input collection.",
    )

    # Add command-line argument for each of the input arguments
    parser.add_argument(
        "--opName",
        dest="opName",
        type=str,
        help="Op overloading method to perform",
        required=True,
    )
    parser.add_argument(
        "--inpDir",
        dest="in1",
        type=str,
        help="Collection to be processed by this plugin",
        required=False,
    )
    parser.add_argument(
        "--threshold",
        dest="threshold",
        type=str,
        help="The threshold value to be applied to the input",
        required=False,
    )

    # Add command-line argument for each of the output arguments
    parser.add_argument(
        "--outDir", dest="out", type=str, help="Output collection", required=True
    )

    """ Parse the arguments """
    args = parser.parse_args()

    # Input Args
    _opName = args.opName
    logger.info("opName = {}".format(_opName))

    _in1 = Path(args.in1)
    logger.info("inpDir = {}".format(_in1))

    _threshold = args.threshold
    logger.info("threshold = {}".format(_threshold))

    # Output Args
    _out = Path(args.out)
    logger.info("outDir = {}".format(_out))

    main(_opName=_opName, _in1=_in1, _threshold=_threshold, _out=_out)
